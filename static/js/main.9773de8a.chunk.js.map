{"version":3,"sources":["components/navbar/navbar.js","components/homepage/showcase/showcase.js","components/homepage/homecards/homecards.js","components/homepage/homepage.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Showcase","Homecards","class","Homepage","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAwDeA,EApDA,WACX,OACI,yBAAKC,UAAU,YACX,kBAAC,IAAD,KACI,wBAAIA,UAAU,QAAd,MAEI,0BAAMA,UAAU,cAAhB,KAFJ,QAQJ,wBAAIA,UAAU,aACV,wBAAIA,UAAU,aACV,kBAAC,IAAD,aAGA,0BAAMA,UAAU,sBAGpB,wBAAIA,UAAU,aACV,kBAAC,IAAD,iBAGA,0BAAMA,UAAU,sBAGpB,wBAAIA,UAAU,aACV,kBAAC,IAAD,iBAGA,0BAAMA,UAAU,sBAGpB,wBAAIA,UAAU,aACV,kBAAC,IAAD,kBAGA,0BAAMA,UAAU,sBAGpB,wBAAIA,UAAU,aACV,kBAAC,IAAD,mBAGA,0BAAMA,UAAU,yBC7BrBC,G,MAhBE,WACb,OACI,yBAAKD,UAAU,YACX,yBAAKA,UAAU,aACX,iDACA,6DAGJ,kBAAC,IAAD,CAAMA,UAAU,OAAhB,aAEI,uBAAGA,UAAU,6BCyBdE,G,MAnCG,WACd,OACI,yBAAKF,UAAU,cACX,yBAAKA,UAAU,cACX,kBAAC,IAAD,KACI,yBAAKA,UAAU,2BACf,0CACA,kFACA,uBAAGA,UAAU,aAAb,eAAqC,uBAAGG,MAAM,4BAKtD,yBAAKH,UAAU,QACX,kBAAC,IAAD,KACI,yBAAKA,UAAU,qBACf,oCACA,kFACA,uBAAGA,UAAU,aAAb,eAAqC,uBAAGG,MAAM,4BAItD,yBAAKH,UAAU,cACX,kBAAC,IAAD,KACI,yBAAKA,UAAU,2BACf,0CACA,kFACA,uBAAGA,UAAU,aAAb,eAAqC,uBAAGG,MAAM,+BClBnDC,EATE,WACb,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAGC,EANA,WACX,OACI,uCCgBOC,MAZf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9773de8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './navbar.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"main-nav\">\r\n            <Link>\r\n                <h1 className=\"logo\">\r\n                    CoA\r\n                    <span className=\"accented-x\">x</span>\r\n                    iom\r\n                </h1>\r\n            </Link>\r\n            \r\n\r\n            <ul className=\"main-menu\">\r\n                <li className=\"link-item\">\r\n                    <Link>\r\n                        Home\r\n                    </Link>\r\n                    <span className=\"underline-slider\"></span>\r\n                </li>\r\n\r\n                <li className=\"link-item\">\r\n                    <Link>\r\n                        About Us\r\n                    </Link>\r\n                    <span className=\"underline-slider\"></span>\r\n                </li>\r\n\r\n                <li className=\"link-item\">\r\n                    <Link>\r\n                        Services\r\n                    </Link>\r\n                    <span className=\"underline-slider\"></span>\r\n                </li>\r\n\r\n                <li className=\"link-item\">\r\n                    <Link>\r\n                        Resources\r\n                    </Link>\r\n                    <span className=\"underline-slider\"></span>\r\n                </li>\r\n\r\n                <li className=\"link-item\">\r\n                    <Link>\r\n                        Contact Us\r\n                    </Link>\r\n                    <span className=\"underline-slider\"></span>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './showcase.css';\r\n\r\nconst Showcase = () =>{\r\n    return (\r\n        <div className=\"showcase\">\r\n            <div className=\"color-bar\">\r\n                <h2>Risk Consultation</h2>\r\n                <p>Reach out now to get a quote!</p>\r\n            </div>\r\n\r\n            <Link className=\"btn\">\r\n                Contact Us\r\n                <i className=\"fas fa-chevron-right\"></i>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Showcase;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './homecards.css';\r\n\r\nconst Homecards = () =>{\r\n    return(\r\n        <div className=\"home-cards\">\r\n            <div className=\"consulting\">\r\n                <Link>\r\n                    <div className=\"image consulting-image\"></div>\r\n                    <h2>Consulting</h2>\r\n                    <p>We do a lot of consutling working and thats why....</p>\r\n                    <p className=\"read-more\">Read More...<i class=\"fas fa-chevron-right\"></i></p>\r\n                    \r\n                </Link>\r\n            </div>\r\n\r\n            <div className=\"risk\">\r\n                <Link>\r\n                    <div className=\"image risk-image\"></div>\r\n                    <h2>Risk</h2>\r\n                    <p>We do a lot of consutling working and thats why....</p>\r\n                    <p className=\"read-more\">Read More...<i class=\"fas fa-chevron-right\"></i></p>\r\n                </Link>\r\n            </div>\r\n\r\n            <div className=\"compliance\">\r\n                <Link>\r\n                    <div className=\"image consulting-image\"></div>\r\n                    <h2>Compliance</h2>\r\n                    <p>We do a lot of consutling working and thats why....</p>\r\n                    <p className=\"read-more\">Read More...<i class=\"fas fa-chevron-right\"></i></p>\r\n                </Link>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Homecards;","import React from 'react';\r\nimport Showcase from './showcase/showcase';\r\nimport Homecards from './homecards/homecards';\r\n\r\nconst Homepage = () =>{\r\n    return(\r\n        <div>\r\n            <Showcase/>\r\n            <Homecards/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <div>hello</div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navbar/navbar';\nimport Homepage from './components/homepage/homepage';\nimport Footer from './components/footer/footer';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar/>\n        <Homepage/>\n        <Footer/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}